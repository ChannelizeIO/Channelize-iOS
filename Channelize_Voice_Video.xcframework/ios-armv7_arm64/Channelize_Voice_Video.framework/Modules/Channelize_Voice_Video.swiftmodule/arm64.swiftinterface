// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 effective-4.2 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target arm64-apple-ios10.3 -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -Onone -module-name Channelize_Voice_Video
import AVFoundation
import AgoraRtcEngineKit
import Alamofire
import CallKit
import Channelize_API
@_exported import Channelize_Voice_Video
import Foundation
import SDWebImage
import Swift
import UIKit
public protocol CallHandleDelegate {
  func endTheCall(call: Channelize_API.CHActiveCall)
  func mutedTheCall(call: Channelize_API.CHActiveCall, isMuted: Swift.Bool)
  func startedNewCall(call: Channelize_API.CHActiveCall)
  func callConnected(call: Channelize_API.CHActiveCall)
}
open class ChVoiceVideo : Channelize_API.CallSDKDelegates {
  public var newCallProvider: Channelize_Voice_Video.CallProvider?
  public var callKitProvider: Channelize_Voice_Video.CallKitProvider?
  public var currentCall: Channelize_API.CHActiveCall?
  public static var instance: Channelize_Voice_Video.ChVoiceVideo
  public var callSessionDelegates: Channelize_Voice_Video.CHCallSessionDelegate?
  public var isAnyCallIsOngoing: Swift.Bool
  public static var isIncomingCall: Swift.Bool
  public static var isCallConnected: Swift.Bool
  public static var isCallAcceptedOnAnotherDevice: Swift.Bool
  public static var isCallEndedFromRemote: Swift.Bool
  public static func configureVoiceVideo()
  public static func launchCallViewController(navigationController: UIKit.UINavigationController?, user: Channelize_API.CHUser, type: Swift.String)
  public func launchCallViewController(navigationController: UIKit.UINavigationController?, activeCall: Channelize_API.CHActiveCall)
  public func getCallObject(user: Channelize_API.CHUser, type: Channelize_API.CHCallScreen) -> Channelize_API.CHActiveCall
  public static func showIncomingCall(call: Channelize_API.CHActiveCall, completion: (Foundation.NSError?) -> Swift.Void)
  public static func sendUserBusyNotification(forCallId: Swift.String, userId: Swift.String)
  public static func performOutGoingCallRejected(callTopic: Swift.String)
  public static func performOnGoingCallEnded(callTopic: Swift.String)
  public static func postCallRecievedNotification(callTopic: Swift.String)
  public static func postCallAcceptedNotification(callTopic: Swift.String)
  public static func endMissedIncomingCall()
  public func getActiveCall() -> Channelize_API.CHActiveCall?
  public func removeCurrentCall()
  public func removeCallProvider()
  @objc deinit
}
public protocol CHCallSessionDelegate {
  func didAudioMuted(with call: Channelize_API.CHActiveCall)
  func didEndCall(with call: Channelize_API.CHActiveCall)
  func didStartNewCall(with call: Channelize_API.CHActiveCall)
  func didCallConnected(with call: Channelize_API.CHActiveCall)
}
@objc public class CallKitProvider : ObjectiveC.NSObject, CallKit.CXProviderDelegate {
  @objc override dynamic public init()
  @objc deinit
  @objc public func providerDidReset(_ provider: CallKit.CXProvider)
  @objc public func provider(_ provider: CallKit.CXProvider, perform action: CallKit.CXStartCallAction)
  @objc public func provider(_ provider: CallKit.CXProvider, perform action: CallKit.CXEndCallAction)
  @objc public func provider(_ provider: CallKit.CXProvider, perform action: CallKit.CXAnswerCallAction)
  @objc public func provider(_ provider: CallKit.CXProvider, perform action: CallKit.CXSetMutedCallAction)
}
@objc public class CallProvider : ObjectiveC.NSObject, CallKit.CXProviderDelegate {
  @objc deinit
  @objc public func providerDidReset(_ provider: CallKit.CXProvider)
  @objc public func provider(_ provider: CallKit.CXProvider, perform action: CallKit.CXEndCallAction)
  @objc public func provider(_ provider: CallKit.CXProvider, perform action: CallKit.CXAnswerCallAction)
  @objc public func provider(_ provider: CallKit.CXProvider, perform action: CallKit.CXStartCallAction)
  @objc public func provider(_ provider: CallKit.CXProvider, perform action: CallKit.CXSetMutedCallAction)
}
extension CallProvider : Channelize_API.CHCallEventDelegates {
  public func didCallAccepted(data: Foundation.Data, topic: Swift.String)
  public func didCallEnded(data: Foundation.Data, topic: Swift.String)
  public func didCallRejected(data: Foundation.Data, topic: Swift.String)
  public func didCallRecieved(data: Foundation.Data, topic: Swift.String)
}
extension CallProvider : Channelize_Voice_Video.CallHandleDelegate {
  public func mutedTheCall(call: Channelize_API.CHActiveCall, isMuted: Swift.Bool)
  public func startedNewCall(call: Channelize_API.CHActiveCall)
  public func endTheCall(call: Channelize_API.CHActiveCall)
  public func callConnected(call: Channelize_API.CHActiveCall)
}
